%{
    #include <iostream>
    #include <string>
    #include <stdio.h>
    #include <math.h>
    #include "game.cpp"
    #include <vector>
    #include <map>
    using namespace std;
    int pwr(int a, int b);
    int yylex();
    int yyerror(const char* p) { cerr << "Error! " << p << endl; exit(1);};
    extern char yytext[];
    vector<vector<int>> blocks;
	map<string, double> generic_rules;
	map<string, string> string_rules;
	map<string, string> keybind_rules;
	map<string, pair<vector<int>, int>> array_rules;
	map<string, vector<pair<string, int>>> dict_rules;
    vector<int> temp_array;
%}

/* %define api.value.type { std::string } */

%code requires {
    #include <string.h>
}

/* declare tokens */
%union {
    int val;
    char sym;
    char* id;
    char* str;
};
%token<val> NUM
%token<val> BOOL
%token OPP CLP
%token OPB CLB
%token OPSB CLSB
%token CMA
%token ENDSEC
%token ADD SUB
%token MUL DIV
%token ASG
%token EXP
%token COL
%token GT LT
%token NE EQ
%token PROP
%token GTE LTE
%token UPDATE_TK SETUP_TK
%token LET
%token IF
%token THEN
%token ELSE
%token ENDIF
%token<str> KEYBD
%token ID
%token SSTR
%token EOS

%type<str> identifier
%type<val> stored_identifier
%type<str> sstring
%type<val> expr
%type<val> factor
%type<val> term
%type<val> subterm
%type<val> uterm

%%


setup: start_setup setup_block end_setup
start_setup: OPSB SETUP_TK CLSB 
setup_block: proper_stmt setup_block | proper_stmt

end_setup: 
    OPSB ENDSEC SETUP_TK CLSB {}
|   OPSB DIV SETUP_TK CLSB 
    {
        yyerror("The end-setup token uses a backslash.\n");
    }

proper_stmt: 
    setup_stmt EOS {}
|   setup_stmt 
    {
        yyerror("Did you forget a semicolon?\n");
    }

setup_stmt: stringrule | keybindrule | genericrule | arrayrule

stringrule: identifier ASG sstring
{ 
    string value = $3;
    // chop the beginning and trailing quotes
    value = value.substr(1, value.size() - 2);

    string_rules.insert(pair<string, string>($1, value));
}

keybindrule: KEYBD identifier identifier 
{
    keybind_rules.insert(pair<string, string>($2, $3));
}

genericrule: identifier ASG expr 
{ 
    generic_rules.insert(pair<string, double>($1, $3));
}

/* blockrule: LET identifier ASG expr EOS {
    cout << "blockrule " << $2 << " " << $4 << endl; 
} */

arrayrule: LET identifier ASG OPSB array CLSB PROP expr 
{ 
    pair<vector<int>, int> block = make_pair(temp_array, $8);
    array_rules.insert(pair<string, pair<vector<int>, int>>($2, block));
}

array: NUM CMA NUM CMA NUM CMA NUM CMA NUM CMA NUM CMA NUM CMA NUM CMA NUM {
    temp_array = {$1, $3, $5, $7, $9, $11, $13, $15, $17};
}

identifier:
    ID { $$ = strdup(yylval.id); }
sstring:
    SSTR { $$ = strdup(yylval.str); }

    
/* component may have ADD/SUB operators among factors */
expr: 
  factor
| expr ADD factor {$$ = $1 + $3;}
| expr SUB factor {$$ = $1 - $3;}
| BOOL
;
 
/* factor may have MUL/DIV operators among terms */
factor: term
| factor MUL term {$$ = $1 * $3;}
| factor DIV term {if($3) $$ = $1 / $3; else yyerror("Division by zero\n");}
;
 
/* term comprises of subterms which may have power operator */
term: subterm
| term EXP subterm {$$ = pwr($1, $3);}
;
 
/* this rule supports unary plus/minus (Associativity RIGHT-TO-LEFT) */
subterm: uterm
| SUB uterm {$$ = -$2;}
| ADD uterm {$$ = $2;}
;

/* this rule supports brackets in the grammar */
uterm: NUM
| stored_identifier
| OPP expr CLP {$$ = $2;}
;

stored_identifier: 
    ID { 
        string label = strdup(yyval.str); 
        auto it = generic_rules.find(label);  
        if (it == generic_rules.end())
        {
            cout << "Variable " << label << " unassigned" << endl;
            yyerror("Variable unassigned");
        }
        $$ = it->second;
    }


%%

// pow for integers
int pwr(int a, int b)
{
    if(b < 0) return 0;
    int res = 1;
    for(int i = 0; i < b; i++)
        res *= a;
    return res;
}
 

int main()
{
    /* #ifdef YYDEBUG
        yydebug = 1;
    #endif
    */
    yyparse();
    for (const auto &[k, v] : generic_rules)
    {
        std::cout << "generic_rules[" << k << "] = (" << v << ") " << std::endl; 
        if (k == "frameRateLimit")
            gconf.frameRateLimit = v;
        else if (k == "normalTimeDelta")
            gconf.normalTimeDelta = v;
        else if (k == "fastTimeDelta")
            gconf.fastTimeDelta = v;
        else if (k == "singleLineReward")
            gconf.singleLineReward = v;
        else if (k == "doubleLineReward")
            gconf.doubleLineReward = v;
        else if (k == "tripleLineReward")
            gconf.tripleLineReward = v;
        else if (k == "fourLineReward")
            gconf.fourLineReward = v;
        else if (k == "tileScaleX")
            gconf.tileScaleX = v;
        else if (k == "tileScaleY")
            gconf.tileScaleY = v;
        else if (k == "numTilesX")
            gconf.numTilesX = v;
        else if (k == "numTilesY")
            gconf.numTilesY = v;
        else if (k == "backgroundColorR")
            gconf.backgroundColorR = v;
        else if (k == "backgroundColorG")
            gconf.backgroundColorG = v;
        else if (k == "backgroundColorB")
            gconf.backgroundColorB = v;
        else if (k == "fontSize")
            gconf.fontSize = v;
        else if (k == "fontScaleX")
            gconf.fontScaleX = v;
        else if (k == "fontScaleY")
            gconf.fontScaleY = v;
        else if (k == "fontColorR")
            gconf.fontColorR = v;
        else if (k == "fontColorG")
            gconf.fontColorG = v;
        else if (k == "fontColorB")
            gconf.fontColorB = v;
        else
        {
            cout << "Invalid rule: " << k << endl;
            yyerror("");
        }
    }

    for (const auto &[k, v] : string_rules)
    {
        std::cout << "string_rules[" << k << "] = (" << v << ") " << std::endl; 
        if (k =="gameWindowTitle")
            gconf.gameWindowTitle = v;
        else if (k == "gameOverMsg")
            gconf.gameOverMsg = v;
        else if (k == "keyUP")
            gconf.keyUP = v;
        else if (k == "keyDOWN")
            gconf.keyDOWN = v;
        else if (k == "keyLEFT")
            gconf.keyLEFT = v;
        else if (k == "keyRIGHT")
            gconf.keyRIGHT = v;
        else if (k == "keyQuit")
            gconf.keyQUIT = v;
        else if (k == "tileSpriteImgPath")
            gconf.tileSpriteImgPath = v;
        else if (k == "musicPath")
            gconf.musicPath = v;
        else if (k == "fallSoundPath")
            gconf.fallSoundPath = v;
        else if (k == "lineSoundPath")
            gconf.lineSoundPath = v;
        else if (k == "tetrisSoundPath")
            gconf.tetrisSoundPath = v;
        else if (k == "fontPath")
            gconf.fontPath = v;
        else
        {
            cout << "Invalid rule: " << k << endl;
            yyerror("");
        }

    }

    for (const auto &[k, v] : keybind_rules)
    {
        if (k == "UP")
            gconf.keyUP = v;
        else if (k == "DOWN")
            gconf.keyDOWN = v;
        else if (k == "LEFT")
            gconf.keyLEFT = v;
        else if (k == "RIGHT")
            gconf.keyRIGHT = v;
        else if (k == "QUIT")
            gconf.keyQUIT = v;
        else
        {
            cout << "Invalid rule: " << k << endl;
            yyerror("");
        }
    }
    for (const auto &[k, v] : array_rules)
    {
        std::cout << "array_rules[" << k << "] = (";
        for (int x: v.first)
            std::cout << x << " ";
        std::cout << ") % " << v.second << std::endl; 
    }

    gameloop(gconf);
    return 0;
}

