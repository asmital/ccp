%{
    #include <iostream>
    #include <string>
    #include <stdio.h>
    #include <math.h>
    #include "game.cpp"
    using namespace std;
    int yylex();
    int yyerror(const char* p) { cerr << "Error!" << p << endl; return 0;};
    extern char yytext[];
%}

/* %define api.value.type { std::string } */

%code requires {
    #include <string.h>
}

/* declare tokens */
%union {
    int val;
    char sym;
    char* id;
    char* str;
    bool b;
};
%token NUM
%token BOOL
%token OPP
%token CLP
%token OPB
%token CLB
%token OPSB
%token CLSB
%token CMA
%token ENDSEC
%token ADD
%token SUB
%token MUL
%token DIV
%token ASG
%token EXP
%token COL
%token GT
%token LT
%token NE
%token EQ
%token GTE
%token LTE
%token UPDATE_TK
%token SETUP_TK
%token LET
%token IF
%token THEN
%token ELSE
%token ENDIF
%token KEYBD
%token ID
%token SSTR
%token EOS

%type<str> identifier
%type<str> sstring
%%


setup: start_setup setup_block end_setup
start_setup: OPSB SETUP_TK CLSB 
setup_block: setup_stmt setup_block | setup_stmt
end_setup: OPSB ENDSEC SETUP_TK CLSB

setup_stmt: bgchange { cout << "bgchange\n"; }

bgchange: identifier ASG sstring EOS { cout << "bgchange" << $1 << " " << $3 << endl;}
 
identifier:
    ID { $$ = strdup(yylval.id); }
sstring:
    SSTR { $$ = strdup(yylval.str); }

%%

int main()
{
    #ifdef YYDEBUG
        yydebug = 1;
    #endif
    yyparse();
    /* gameloop(); */
    return 0;
}

